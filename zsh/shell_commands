#!/usr/bin/env zsh
# =====================================================================
#  Andrew’s Productivity Toolkit for Z-Shell
#  Version : 2025-04-28
#  License : MIT
#  Usage   : source this file from ~/.zshrc
# =====================================================================

# ---------------------------------------------------------------------
#  Safety first
# ---------------------------------------------------------------------
set -o errexit -o pipefail -o noclobber
set -o nounset                             # NO unbound variables
setopt extendedglob                        # advanced globbing for Z-Shell

# ---------------------------------------------------------------------
#  Minimal logging helpers (✓ ✖ ℹ) – colourised, always available
# ---------------------------------------------------------------------
autoload -Uz colors && colors
_ok()   { print -P "%F{green}✔%f $*"; }
_err()  { print -P "%F{red}✖%f $*" >&2; }
_info() { print -P "%F{blue}ℹ%f $*"; }

# ---------------------------------------------------------------------
#  Internal helpers: argument validation & embedded help
# ---------------------------------------------------------------------
# Map of <command>=<help-string>
typeset -Ag __CMD_HELP

# Print help for one command or all commands
helpme() {
  local c
  if [[ -n "${1:-}" ]]; then
    c="$1"
    [[ -n "${__CMD_HELP[$c]:-}" ]] && print -P "%F{cyan}$c%f – ${__CMD_HELP[$c]}" || _err "No help for '$c'"
  else
    print -P "%F{cyan}Available commands:%f"
    for c in ${(ko)__CMD_HELP}; do
      print -P "  %F{cyan}${c}%f – ${__CMD_HELP[$c]}"
    done | sort
    print "\nTip: helpme <command> for details."
  fi
}

# Require at least N arguments for the current function
require_args() {
  local want="$1" got="$#argv"
  (( got < want )) && {
    _err "Usage: ${(k)__CMD_HELP[$0]}"
    return 1
  }
}

# ---------------------------------------------------------------------
#  1. Editing helpers
# ---------------------------------------------------------------------
edit-profile() {
  [[ -x "$(command -v zshconfig)" ]] || { _err "zshconfig not found."; return 1; }
  zshconfig
}
__CMD_HELP[edit-profile]="Open ~/.zshrc in your preferred editor"

edit-commands() {
  require_args 0 "$@"
  command code ~/Profile/shell_commands
}
__CMD_HELP[edit-commands]="Open ~/Profile/shell_commands in VS Code"

edit-paths() {
  require_args 0 "$@"
  command code ~/Profile/shell_paths
}
__CMD_HELP[edit-paths]="Open ~/Profile/shell_paths in VS Code"

copy-ssh-key() { <~/.ssh/id_rsa.pub pbcopy && _ok "SSH key copied to clipboard."; }
__CMD_HELP[copy-ssh-key]="Copy ~/.ssh/id_rsa.pub into macOS clipboard"

alias copy-ssh-key=copy-ssh-key  # convenience

# ---------------------------------------------------------------------
# 2. Git helpers
# ---------------------------------------------------------------------
git-new-branch() {
  require_args 1 "$@"
  git checkout -b "$@" && git push --set-upstream origin "$@" && _ok "Branch '$@' created and pushed."
}
__CMD_HELP[git-new-branch]="Create new branch and push to origin"

git-new-local-branch() {
  require_args 1 "$@"
  git checkout -b "$@" && _ok "Local branch '$@' created."
}
__CMD_HELP[git-new-local-branch]="Create new branch locally only"

gitco() {
  require_args 1 "$@"
  git checkout "$@" && _ok "Checked out to $@"
}
__CMD_HELP[gitco]="Alias for git checkout"

alias git-checkout=gitco gitc=gitco

# Dynamic interactive-rebase helpers (rebase2 … rebase10)
git-rebase-i() {
  require_args 1 "$@"
  local n="$1"
  git rebase -i "HEAD~${n}"
}
__CMD_HELP[git-rebase-i]="Interactive rebase last <n> commits (usage: git-rebase-i <n>)"

for i in {2..10}; do
  alias "rebase${i}=git-rebase-i ${i}"
  __CMD_HELP["rebase${i}"]="Interactive rebase last ${i} commits"
done

# Short Git aliases
alias gpull='git pull' gpush='git push' gfpush='git push -f'
alias gstat='git status' gstats='git status'

# ---------------------------------------------------------------------
# 3. Docker helpers
# ---------------------------------------------------------------------
dps() { docker ps "$@"; }
__CMD_HELP[dps]="List running Docker containers (wrapper for docker ps)"

dstop()   { require_args 1 "$@"; docker stop "$@" && _ok "Stopped: $*"; }
__CMD_HELP[dstop]="Stop one or more containers"

dinspect(){ require_args 1 "$@"; docker inspect "$@"; }
__CMD_HELP[dinspect]="docker inspect wrapper"

dbash()   { require_args 1 "$@"; docker exec -it "$@" /bin/bash; }
__CMD_HELP[dbash]="Open interactive bash inside container"

dlogs()   { require_args 1 "$@"; docker logs "$@"; }
__CMD_HELP[dlogs]="docker logs wrapper"

dremove() { require_args 1 "$@"; docker rm "$@" && _ok "Removed: $*"; }
__CMD_HELP[dremove]="Remove one or more containers"

dstopall(){ docker stop $(docker ps -aq) && _ok "All containers stopped."; }
__CMD_HELP[dstopall]="Stop every running container"

drmall()  { docker rm $(docker ps -aq)  && _ok "All containers removed."; }
__CMD_HELP[drmall]="Remove every container (stopped or running)"

drmiall() { docker rmi $(docker images -q) && _ok "All images removed."; }
__CMD_HELP[drmiall]="Delete every Docker image"

# ---------------------------------------------------------------------
# 4. Miscellaneous utilities
# ---------------------------------------------------------------------
cdev() { cd ~/Development; }
__CMD_HELP[cdev]="cd to ~/Development"

gw()   { ./gradlew "$@"; }
__CMD_HELP[gw]="Shortcut for ./gradlew"

whats-on-port() {
  require_args 1 "$@"
  lsof -i TCP:"$1"
}
__CMD_HELP[whats-on-port]="List processes bound to given TCP port"

findpid() {
  require_args 1 "$@"
  ps -e | grep --color=auto -i "$@" || _err "No process matches '$*'"
}
__CMD_HELP[findpid]="Search running processes by pattern"

# ---------------------------------------------------------------------
# 5. OpenShift helpers
# ---------------------------------------------------------------------
: "${OPENSHIFT_CFG:=$HOME/.openshift}"

_oc_cfg_get() {
  local key="$1"
  [[ -f "$OPENSHIFT_CFG" ]] || { _err "Config '$OPENSHIFT_CFG' not found."; return 1; }
  local value
  value="$(grep -E "^[[:space:]]*${key}[[:space:]]*=" "$OPENSHIFT_CFG" | head -n1 | cut -d'=' -f2- | xargs)"
  [[ -n "$value" ]] || { _err "Key '$key' missing in $OPENSHIFT_CFG."; return 1; }
  print -- "$value"
}

oc-login() {
  [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]] && { print "Usage: oc-login <environment>"; return 0; }
  require_args 1 "$@"
  local env="$1" url token
  url="$(_oc_cfg_get "${env}.url")"   || return 1
  token="$(_oc_cfg_get "${env}.token")" || return 1
  _info "Logging in to '${env}' ($url)…"
  oc login --token="$token" --server="$url" --insecure-skip-tls-verify=false && _ok "Logged in to $env"
}
__CMD_HELP[oc-login]="Log in to OpenShift environment defined in ~/.openshift"

oc-set-project() {
  require_args 1 "$@"
  oc project "$1" && _ok "Current project: $(oc project -q)"
}
__CMD_HELP[oc-set-project]="Switch current OpenShift project"

oc-get-pods() {
  _info "Pods in $(oc project -q)"
  oc get pods "$@"
}
__CMD_HELP[oc-get-pods]="List pods (passes extra args to oc get pods)"

oc-scale-deployment() {
  require_args 2 "$@"
  local dep="$1" repl="$2"
  oc scale deployment/"$dep" --replicas="$repl" && _ok "Scaled $dep → $repl"
}
__CMD_HELP[oc-scale-deployment]="Scale deployment to <replicas>"

oc-delete() {
  require_args 1 "$@"
  oc delete pod "$1" && _ok "Delete requested for pod $1"
}
__CMD_HELP[oc-delete]="Gracefully delete a pod"

oc-force-delete() {
  require_args 1 "$@"
  local pod="$1"
  _info "Force-deleting $pod"
  oc delete pod "$pod" --grace-period=0 --force --wait=false 2>/dev/null || true
  if oc get pod "$pod" &>/dev/null; then
    oc patch pod "$pod" --type=merge -p '{"metadata":{"finalizers":[]}}' >/dev/null
    oc delete pod "$pod" --grace-period=0 --force --wait=false >/dev/null
  fi
  oc get pod "$pod" &>/dev/null && { _err "Still present: $pod"; return 1; } || _ok "$pod removed"
}
__CMD_HELP[oc-force-delete]="Immediate pod delete (skips grace & clears finalizers)"

oc-logs() {
  [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]] && { print "Usage: oc-logs <pod> [container] [--no-follow]"; return 0; }
  require_args 1 "$@"
  local pod="$1"; shift
  local follow="-f"
  [[ "${1:-}" == "--no-follow" ]] && { follow=""; shift; }
  oc logs $follow "$pod" "$@"      # remaining args pass through
}
__CMD_HELP[oc-logs]="Stream pod logs (omit --no-follow to tail)"

# ---------------------------------------------------------------------
# 6. Optional completion setup (uncomment if needed)
# ---------------------------------------------------------------------
# if [[ -n ${ZSH_VERSION} ]]; then
#   autoload -Uz compinit && compinit
# fi

# ---------------------------------------------------------------------
# 7. Final banner
# ---------------------------------------------------------------------
_ok "Andrew Toolkit loaded – type 'helpme' to list commands."
